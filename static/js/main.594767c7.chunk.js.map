{"version":3,"sources":["store/actionTypes.js","store/reducers.js","store/store.js","Components/LoginForm/LoginForm.jsx","api/initialProducts.js","Components/LoginForm/index.js","store/actions.js","Components/ListOfProducts/ListOfProducts.jsx","Components/ListOfProducts/index.js","Components/ProductDetails/ProductDetails.jsx","Components/ProductDetails/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.jsx"],"names":["ACTION_TYPES","initialState","localStorage","JSON","parse","name","listOfProducts","productDetails","store","createStore","state","action","type","payload","filter","item","id","find","composeWithDevTools","subscribe","stringify","getState","LoginForm","userName","userNameError","handeleChangeLogin","event","preventDefault","target","setState","value","trimRight","handeleSubmit","props","submitName","history","length","push","this","className","Paper","onSubmit","TextField","label","onChange","margin","variant","error","Button","color","React","Component","initialProducts","amount","connectedLoginForm","connect","dispatch","ListOfProducts","setOpen","newName","newAmount","newType","newNameError","newAmountError","newTypeError","handleOpen","handleClose","handleChangeName","trimLeft","handleChangeAmount","handleChangeType","handleSubmit","addNewProduct","parseInt","Math","random","deleteItem","showDetails","AppBar","position","Toolbar","Typography","IconButton","edge","aria-label","to","List","map","ListItem","key","onClick","ListItemText","primary","ListItemSecondaryAction","Modal","aria-labelledby","aria-describedby","open","onClose","fullWidth","connectedListOfProducts","newProduct","ProductDetails","component","connectedProductDetails","App","loadData","path","exact","connectedApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.594767c7.chunk.js","sourcesContent":["export const ACTION_TYPES = {\n  LOAD_DATA: 'LOAD_DATA',\n  SUBMIT_NAME: 'SUBMIT_NAME',\n  DELETE_ITEM: 'DELETE_ITEM',\n  SHOW_DETAILS: 'SHOW_DETAILS',\n  ADD_NEW_PRODUCT: 'ADD_NEW_PRODUCT',\n};\n","import { ACTION_TYPES } from './actionTypes';\n\nconst initialState = localStorage['redux-store']\n  ? JSON.parse(localStorage['redux-store'])\n  : {\n    name: '',\n    listOfProducts: [],\n    productDetails: {},\n  };\n\n// eslint-disable-next-line import/prefer-default-export\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.LOAD_DATA:\n      return {\n        ...state,\n        listOfProducts: [...action.payload],\n      };\n    case ACTION_TYPES.SUBMIT_NAME:\n      return {\n        ...state,\n        name: action.payload,\n      };\n    case ACTION_TYPES.DELETE_ITEM:\n      return {\n        ...state,\n        listOfProducts: [...state.listOfProducts].filter((item) => item.id !== action.payload),\n      };\n    case ACTION_TYPES.SHOW_DETAILS:\n      return {\n        ...state,\n        productDetails: [...state.listOfProducts].find((item) => item.id === action.payload),\n      };\n    case ACTION_TYPES.ADD_NEW_PRODUCT:\n      return {\n        ...state,\n        listOfProducts: [...state.listOfProducts, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { reducers } from './reducers';\n\nexport const store = createStore(reducers, composeWithDevTools());\n\nstore.subscribe(() => {\n  localStorage['redux-store'] = JSON.stringify(store.getState());\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport './LoginForm.css';\n\n\nclass LoginForm extends React.Component {\n  state = {\n    userName: '',\n    userNameError: false,\n  };\n\n  handeleChangeLogin = (event) => {\n    event.preventDefault();\n    const { target } = event;\n    this.setState({\n      userName: target.value.trimRight(),\n    });\n  }\n\n  handeleSubmit = () => {\n    const { userName } = this.state;\n    const { submitName, history } = this.props;\n    if (userName.length === 0) {\n      this.setState({\n        userNameError: true,\n      });\n    } else {\n      submitName(userName);\n      this.setState({\n        userName: '',\n        userNameError: false,\n      });\n      history.push('/list');\n    }\n  }\n\n  render() {\n    const { userName, userNameError } = this.state;\n    return (\n      <div className=\"container\">\n        <Paper>\n          <form\n            onSubmit={() => this.handeleSubmit()}\n            className=\"form\"\n          >\n            <TextField\n              className=\"input\"\n              id=\"outlined-name\"\n              label=\"Name\"\n              value={userName}\n              onChange={this.handeleChangeLogin}\n              margin=\"normal\"\n              variant=\"outlined\"\n              error={userNameError}\n            />\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\" className=\"submit-button\">\n              Login\n            </Button>\n          </form>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nLoginForm.propTypes = {\n  submitName: PropTypes.func,\n}.isRequaired;\n\nexport default LoginForm;\n","export const initialProducts = [\n  {\n    id: 1,\n    name: 'Carrot',\n    amount: 0.5,\n    type: 'vegetables',\n  },\n  {\n    id: 2,\n    name: 'Potato',\n    amount: 1,\n    type: 'vegetables',\n  },\n  {\n    id: 3,\n    name: 'Rice',\n    amount: 1,\n    type: 'groats',\n  },\n  {\n    id: 4,\n    name: 'Water',\n    amount: 1.5,\n    type: 'water',\n  },\n];\n","import { connect } from 'react-redux';\nimport LoginForm from './LoginForm';\nimport { submitName } from '../../store/actions';\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitName: (name) => dispatch(submitName(name)),\n});\n\nconst connectedLoginForm = connect(null, mapDispatchToProps)(LoginForm);\n\nexport {\n  connectedLoginForm as LoginForm,\n};\n","import { ACTION_TYPES } from './actionTypes';\nimport { initialProducts } from '../api/initialProducts';\n\nexport const loadData = () => ({\n  type: ACTION_TYPES.LOAD_DATA,\n  payload: initialProducts,\n});\n\nexport const submitName = (name) => ({\n  type: ACTION_TYPES.SUBMIT_NAME,\n  payload: name,\n});\n\nexport const deleteItem = (id) => ({\n  type: ACTION_TYPES.DELETE_ITEM,\n  payload: id,\n});\n\nexport const showDetails = (id) => ({\n  type: ACTION_TYPES.SHOW_DETAILS,\n  payload: id,\n});\n\nexport const addNewProduct = (newProduct) => ({\n  type: ACTION_TYPES.ADD_NEW_PRODUCT,\n  payload: newProduct,\n});\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport './ListOfProducts.css';\n\nclass ListOfProducts extends React.Component {\n  state = {\n    setOpen: false,\n    newName: '',\n    newAmount: 0,\n    newType: '',\n\n    newNameError: false,\n    newAmountError: false,\n    newTypeError: false,\n  }\n\n  handleOpen = () => {\n    this.setState({\n      setOpen: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      setOpen: false,\n    });\n  };\n\n  handleChangeName = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      newName: value.trimLeft(),\n    });\n  };\n\n  handleChangeAmount = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      newAmount: value,\n    });\n  };\n\n  handleChangeType = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      newType: value.trimLeft(),\n    });\n  };\n\n  handleSubmit = () => {\n    const {\n      newName, newAmount, newType,\n    } = this.state;\n    const { addNewProduct } = this.props;\n    if (newName === '') {\n      this.setState({\n        newNameError: true,\n      });\n    } else if (newAmount === 0) {\n      this.setState({\n        newNameError: false,\n        newAmountError: true,\n      });\n    } else if (newType === '') {\n      this.setState({\n        newNameError: false,\n        newAmountError: false,\n        newTypeError: true,\n      });\n    } else {\n      const newProduct = {\n        name: newName,\n        amount: newAmount,\n        type: newType,\n        id: parseInt(Math.random() * 100, 16),\n      };\n      addNewProduct(newProduct);\n      this.setState({\n        newName: '',\n        newAmount: 0,\n        newType: '',\n\n        newNameError: false,\n        newAmountError: false,\n        newTypeError: false,\n      });\n      this.handleClose();\n    }\n  };\n\n  render() {\n    const {\n      listOfProducts, name, deleteItem, showDetails,\n    } = this.props;\n    const {\n      setOpen, newName, newAmount, newType, newAmountError, newNameError, newTypeError,\n    } = this.state;\n    return (\n      <>\n        <div>\n          <AppBar position=\"static\">\n            <Toolbar className=\"nav-bar\">\n              <Typography variant=\"h6\">\n                Name:\n                {name}\n              </Typography>\n              <div>\n                <IconButton edge=\"end\" aria-label=\"delete\">\n                  <Link to=\"/\" className=\"link exit-button \">\n                    <ExitToAppIcon />\n                  </Link>\n                </IconButton>\n              </div>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <div className=\"list-container\">\n          <List>\n            {listOfProducts.map((item) => (\n              <ListItem key={item.id}>\n                <Link to={`/list/${item.id}`} onClick={() => showDetails(item.id)} className=\"link link-item\">\n                  <ListItemText\n                    primary={item.name}\n                  />\n                </Link>\n                <ListItemSecondaryAction>\n                  <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteItem(item.id)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n          <div className=\"popup-container\">\n            <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.handleOpen} className=\"action-button\">Add new product</Button>\n            <Modal\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n              open={setOpen}\n              onClose={this.handleClose}\n            >\n              <div className=\"pop-up\">\n                <h2 id=\"simple-modal-title\">Add new product</h2>\n                <form onSubmit={this.handleSubmit}>\n                  <TextField\n                    onChange={this.handleChangeName}\n                    id=\"outlined-full-width\"\n                    label=\"Name\"\n                    value={newName}\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    error={newNameError}\n                  />\n                  <TextField\n                    onChange={this.handleChangeAmount}\n                    id=\"outlined-full-width\"\n                    type=\"number\"\n                    label=\"Amount\"\n                    value={newAmount}\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    error={newAmountError}\n                  />\n                  <TextField\n                    onChange={this.handleChangeType}\n                    id=\"outlined-full-width\"\n                    label=\"Type\"\n                    value={newType}\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    error={newTypeError}\n                  />\n                  <div className=\"pop-up-buttons\">\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"action-button\">Add</Button>\n                    <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.handleClose} className=\"action-button\">Cancel</Button>\n                  </div>\n                </form>\n              </div>\n            </Modal>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nListOfProducts.propTypes = {\n  addNewProduct: PropTypes.func,\n  listOfProducts: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    amount: PropTypes.number,\n    type: PropTypes.string,\n  })),\n  name: PropTypes.string,\n  deleteItem: PropTypes.func,\n  showDetails: PropTypes.func,\n}.isRequaired;\n\nexport default ListOfProducts;\n","import { connect } from 'react-redux';\nimport ListOfProducts from './ListOfProducts';\nimport { deleteItem, showDetails, addNewProduct } from '../../store/actions';\n\nconst mapStateToProps = (state) => ({\n  listOfProducts: state.listOfProducts,\n  name: state.name,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteItem: (id) => dispatch(deleteItem(id)),\n  showDetails: (id) => dispatch(showDetails(id)),\n  addNewProduct: (newProduct) => dispatch(addNewProduct(newProduct)),\n});\n\nconst connectedListOfProducts = connect(mapStateToProps, mapDispatchToProps)(ListOfProducts);\n\nexport {\n  connectedListOfProducts as ListOfProducts,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Typography from '@material-ui/core/Typography';\nimport './ProductDetails.css';\n\nconst ProductDetails = ({ productDetails }) => (\n  <Paper className=\"container-details\">\n    <Typography variant=\"h5\" component=\"h3\">\n      {productDetails.name}\n    </Typography>\n    <Typography component=\"p\">\n      Amount:\n      {productDetails.amount}\n    </Typography>\n    <Typography component=\"p\">\n      Type:\n      {productDetails.type}\n    </Typography>\n    <IconButton edge=\"end\" aria-label=\"delete\">\n      <Link to=\"/list\">\n        <ArrowBackIosIcon />\n      </Link>\n    </IconButton>\n  </Paper>\n);\n\nProductDetails.propTypes = {\n  productDetails: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    amount: PropTypes.number,\n    type: PropTypes.string,\n  }),\n}.isRequaired;\n\nexport default ProductDetails;\n","import { connect } from 'react-redux';\nimport ProductDetails from './ProductDetails';\n\nconst mapStateToProps = (state) => ({\n  productDetails: state.productDetails,\n});\n\nconst connectedProductDetails = connect(mapStateToProps, null)(ProductDetails);\n\nexport {\n  connectedProductDetails as ProductDetails,\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { LoginForm } from '../LoginForm';\nimport { ListOfProducts } from '../ListOfProducts';\nimport { ProductDetails } from '../ProductDetails';\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { loadData, listOfProducts } = this.props;\n    if (listOfProducts.length === 0) {\n      loadData();\n    }\n  }\n\n  render() {\n    return (\n      <main>\n        <Switch>\n          <Route path=\"/\" exact component={LoginForm} />\n          <Route path=\"/list\" exact component={ListOfProducts} />\n          <Route path=\"/list/:itemId\" exact component={ProductDetails} />\n        </Switch>\n      </main>\n    );\n  }\n}\n\nApp.propTypes = {\n  loadData: PropTypes.func,\n  listOfProducts: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    amount: PropTypes.number,\n    type: PropTypes.string,\n  })),\n}.isRequaired;\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { loadData } from '../../store/actions';\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadData: () => dispatch(loadData()),\n});\n\nconst mapStateToProps = (state) => ({\n  listOfProducts: state.listOfProducts,\n});\n\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport {\n  connectedApp as App,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { store } from './store/store';\nimport './index.css';\nimport { App } from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}